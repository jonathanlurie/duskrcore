{"version":3,"file":"duskrcore.js","sources":["../src/AdobeXmp.js","../node_modules/splines/index.js","../src/AdobeXmpInterpolator.js","../src/index.js"],"sourcesContent":["import XmlParser from 'xml-js'\n\n// list of basic attributes to not interpolate\nconst UNSETTINGS = [\n  'Version',\n  'ProcessVersion'\n]\n\nclass AdobeXmp {\n\n  /**\n   * Val is a string, but it can represent a number, a boolean or a string.\n   * This function converts val into the most appropriate type.\n   * @param  {string} val - a value\n   * @return {string|number|boolean}\n   */\n  static convertToRelevantType(val){\n    let cleanVal = val.trim()\n    // boolean: true\n    if(cleanVal === 'True' || cleanVal === 'true' || cleanVal === 'TRUE')\n      return true\n\n    // boolean: false\n    if(cleanVal === 'False' || cleanVal === 'false' || cleanVal === 'FALSE')\n      return false\n\n    // a number\n    if(parseFloat(cleanVal) !== NaN)\n      return parseFloat(cleanVal)\n\n    // a string\n    return cleanVal\n  }\n\n\n  static convertToString(val){\n    if(val === true)\n      return 'True'\n\n    if(val === false)\n      return 'False'\n\n    if(typeof val === 'number')\n      return val.toString()\n\n    return val.trim()\n  }\n\n\n\n  constructor(){\n    this._xmlPayload = null\n    this._objectRepresentation = null\n  }\n\n\n  setXmlPayload(xmlStr){\n    this._xmlPayload = xmlStr\n    let jsonPayload = XmlParser.xml2json(xmlStr, {compact: true})\n    this._objectRepresentation = JSON.parse(jsonPayload)\n  }\n\n\n  getXml(){\n    return XmlParser.json2xml(JSON.stringify(this._objectRepresentation), {compact: true, ignoreComment: true, spaces: 4})\n  }\n\n\n  _getBasicAttributesObject(){\n    return this._objectRepresentation['x:xmpmeta']['rdf:RDF']['rdf:Description']['_attributes']\n  }\n\n\n  hasSettings(){\n    let ba = this._getBasicAttributesObject()\n    return ba['crs:HasSettings'] === 'True'\n  }\n\n\n  getRawFileName(){\n    let ba = this._getBasicAttributesObject()\n    return ba['crs:RawFileName']\n  }\n\n\n  setRawFileName(name){\n    let ba = this._getBasicAttributesObject()\n    ba['crs:RawFileName'] = name\n  }\n\n\n  getListOfSettingAttributes(){\n    let ba = this._getBasicAttributesObject()\n    let allNames = Object.keys(ba)\n      .filter(attrName => attrName.startsWith('crs:'))\n      .filter(attrName => {\n        let attrValue = ba[attrName]\n        return !isNaN(parseFloat(attrValue))\n      })\n      .map(attrName => attrName.split(':')[1])\n      .filter(attrName => !UNSETTINGS.includes(attrName))\n\n    return allNames\n  }\n\n\n  getSettingAttribute(attrName){\n    let ba = this._getBasicAttributesObject()\n    if(`crs:${attrName}` in ba){\n      return AdobeXmp.convertToRelevantType(ba[`crs:${attrName}`])\n    }else{\n      return null\n    }\n  }\n\n\n  setSettingAttribute(attrName, value){\n    let ba = this._getBasicAttributesObject()\n    ba[`crs:${attrName}`] = AdobeXmp.convertToString(value)\n  }\n\n\n  clone(){\n    let clone = new AdobeXmp()\n    clone.setXmlPayload(this._xmlPayload)\n    return clone\n  }\n\n}\n\nexport default AdobeXmp\n","/**\n * by George MacKerron, mackerron.com\n *\n * Monotonic Cubic Spline:\n *\n *  adapted from:\n *     http://sourceforge.net/mailarchive/forum.php?thread_name=EC90C5C6-C982-4F49-8D46-A64F270C5247%40gmail.com&forum_name=matplotlib-users\n *     (easier to read at http://old.nabble.com/%22Piecewise-Cubic-Hermite-Interpolating-Polynomial%22-in-python-td25204843.html)\n *\n *  with help from:\n *      F N Fritsch & R E Carlson (1980) 'Monotone Piecewise Cubic Interpolation', SIAM Journal of Numerical Analysis 17(2), 238 - 246.\n *      http://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n *      http://en.wikipedia.org/wiki/Cubic_Hermite_spline\n *\n *\n *  Natural and Clamped:\n *\n *  adapted from:\n *      http://www.michonline.com/ryan/csc/m510/splinepresent.html\n **/\n\nvar CubicSpline, MonotonicCubicSpline;\n\n\nMonotonicCubicSpline = function () {\n    function MonotonicCubicSpline(x, y) {\n\n        var alpha, beta, delta, dist, i, m, n, tau, to_fix, _i, _j, _len, _len2, _ref, _ref2, _ref3, _ref4;\n\n        n = x.length;\n        delta = [];\n        m = [];\n        alpha = [];\n        beta = [];\n        dist = [];\n        tau = [];\n\n        for (i = 0, _ref = n - 1; (0 <= _ref ? i < _ref : i > _ref); (0 <= _ref ? i += 1 : i -= 1)) {\n            delta[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\n            if (i > 0) {\n                m[i] = (delta[i - 1] + delta[i]) / 2;\n            }\n        }\n\n        m[0] = delta[0];\n        m[n - 1] = delta[n - 2];\n        to_fix = [];\n\n        for (i = 0, _ref2 = n - 1; (0 <= _ref2 ? i < _ref2 : i > _ref2); (0 <= _ref2 ? i += 1 : i -= 1)) {\n            if (delta[i] === 0) {\n                to_fix.push(i);\n            }\n        }\n\n        for (_i = 0, _len = to_fix.length; _i < _len; _i++) {\n            i = to_fix[_i];\n            m[i] = m[i + 1] = 0;\n        }\n\n        for (i = 0, _ref3 = n - 1; (0 <= _ref3 ? i < _ref3 : i > _ref3); (0 <= _ref3 ? i += 1 : i -= 1)) {\n            alpha[i] = m[i] / delta[i];\n            beta[i] = m[i + 1] / delta[i];\n            dist[i] = Math.pow(alpha[i], 2) + Math.pow(beta[i], 2);\n            tau[i] = 3 / Math.sqrt(dist[i]);\n        }\n\n\n        to_fix = [];\n\n        for (i = 0, _ref4 = n - 1; (0 <= _ref4 ? i < _ref4 : i > _ref4); (0 <= _ref4 ? i += 1 : i -= 1)) {\n            if (dist[i] > 9) {\n                to_fix.push(i);\n            }\n        }\n\n        for (_j = 0, _len2 = to_fix.length; _j < _len2; _j++) {\n            i = to_fix[_j];\n            m[i] = tau[i] * alpha[i] * delta[i];\n            m[i + 1] = tau[i] * beta[i] * delta[i];\n        }\n\n        this.x = x.slice(0, n);\n        this.y = y.slice(0, n);\n        this.m = m;\n    }\n\n    MonotonicCubicSpline.prototype.interpolate = function (x) {\n        var h, h00, h01, h10, h11, i, t, t2, t3, y, _ref;\n\n        for (i = _ref = this.x.length - 2; (_ref <= 0 ? i <= 0 : i >= 0); (_ref <= 0 ? i += 1 : i -= 1)) {\n            if (this.x[i] <= x) {\n                break;\n            }\n        }\n\n        h = this.x[i + 1] - this.x[i];\n        t = (x - this.x[i]) / h;\n        t2 = Math.pow(t, 2);\n        t3 = Math.pow(t, 3);\n        h00 = 2 * t3 - 3 * t2 + 1;\n        h10 = t3 - 2 * t2 + t;\n        h01 = -2 * t3 + 3 * t2;\n        h11 = t3 - t2;\n        y = h00 * this.y[i] + h10 * h * this.m[i] + h01 * this.y[i + 1] + h11 * h * this.m[i + 1];\n\n        return y;\n    };\n\n    return MonotonicCubicSpline;\n}();\n\n\nCubicSpline = function () {\n    function CubicSpline(x, a, d0, dn) {\n\n        var b, c, clamped, d, h, i, k, l, n, s, u, y, z, _ref;\n\n        if (!((x != null) && (a != null))) {\n            return;\n        }\n\n        clamped = (d0 != null) && (dn != null);\n        n = x.length - 1;\n        h = [];\n        y = [];\n        l = [];\n        u = [];\n        z = [];\n        c = [];\n        b = [];\n        d = [];\n        k = [];\n        s = [];\n\n        for (i = 0; (0 <= n ? i < n : i > n); (0 <= n ? i += 1 : i -= 1)) {\n            h[i] = x[i + 1] - x[i];\n            k[i] = a[i + 1] - a[i];\n            s[i] = k[i] / h[i];\n        }\n\n        if (clamped) {\n            y[0] = 3 * (a[1] - a[0]) / h[0] - 3 * d0;\n            y[n] = 3 * dn - 3 * (a[n] - a[n - 1]) / h[n - 1];\n        }\n\n        for (i = 1; (1 <= n ? i < n : i > n); (1 <= n ? i += 1 : i -= 1)) {\n            y[i] = 3 / h[i] * (a[i + 1] - a[i]) - 3 / h[i - 1] * (a[i] - a[i - 1]);\n        }\n\n        if (clamped) {\n            l[0] = 2 * h[0];\n            u[0] = 0.5;\n            z[0] = y[0] / l[0];\n        } else {\n            l[0] = 1;\n            u[0] = 0;\n            z[0] = 0;\n        }\n\n        for (i = 1; (1 <= n ? i < n : i > n); (1 <= n ? i += 1 : i -= 1)) {\n            l[i] = 2 * (x[i + 1] - x[i - 1]) - h[i - 1] * u[i - 1];\n            u[i] = h[i] / l[i];\n            z[i] = (y[i] - h[i - 1] * z[i - 1]) / l[i];\n        }\n\n        if (clamped) {\n            l[n] = h[n - 1] * (2 - u[n - 1]);\n            z[n] = (y[n] - h[n - 1] * z[n - 1]) / l[n];\n            c[n] = z[n];\n        } else {\n            l[n] = 1;\n            z[n] = 0;\n            c[n] = 0;\n        }\n\n        for (i = _ref = n - 1; (_ref <= 0 ? i <= 0 : i >= 0); (_ref <= 0 ? i += 1 : i -= 1)) {\n            c[i] = z[i] - u[i] * c[i + 1];\n            b[i] = (a[i + 1] - a[i]) / h[i] - h[i] * (c[i + 1] + 2 * c[i]) / 3;\n            d[i] = (c[i + 1] - c[i]) / (3 * h[i]);\n        }\n\n        this.x = x.slice(0, n + 1);\n        this.a = a.slice(0, n);\n        this.b = b;\n        this.c = c.slice(0, n);\n        this.d = d;\n    }\n\n    CubicSpline.prototype.derivative = function () {\n\n        var c, d, s, x, _i, _j, _len, _len2, _ref, _ref2, _ref3;\n\n        s = new this.constructor();\n        s.x = this.x.slice(0, this.x.length);\n        s.a = this.b.slice(0, this.b.length);\n        _ref = this.c;\n\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n            c = _ref[_i];\n            s.b = 2 * c;\n        }\n        _ref2 = this.d;\n\n        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {\n            d = _ref2[_j];\n            s.c = 3 * d;\n        }\n\n        for (x = 0, _ref3 = this.d.length; (0 <= _ref3 ? x < _ref3 : x > _ref3); (0 <= _ref3 ? x += 1 : x -= 1)) {\n            s.d = 0;\n        }\n\n        return s;\n    };\n\n\n    CubicSpline.prototype.interpolate = function (x) {\n\n        var deltaX, i, y, _ref;\n\n        for (i = _ref = this.x.length - 1; (_ref <= 0 ? i <= 0 : i >= 0); (_ref <= 0 ? i += 1 : i -= 1)) {\n            if (this.x[i] <= x) {\n                break;\n            }\n        }\n\n        deltaX = x - this.x[i];\n        y = this.a[i] + this.b[i] * deltaX + this.c[i] * Math.pow(deltaX, 2) + this.d[i] * Math.pow(deltaX, 3);\n\n        return y;\n    };\n\n    return CubicSpline;\n}();\n\nmodule.exports = {\n    CubicSpline: CubicSpline,\n    MonotonicCubicSpline: MonotonicCubicSpline\n};","import AdobeXmp from './AdobeXmp'\nimport { MonotonicCubicSpline } from 'splines'\n\n\nclass AdobeXmpInterpolator {\n\n  static findNumberSequence(filename){\n    let splitChar = ' '\n    let numbersOnly = Array.from(filename).map(char => isNaN(parseInt(char)) ? splitChar : char)\n      .join('')\n      .split(splitChar)\n      .filter(substr => substr !== '')\n      .map(substr => parseInt(substr))\n      .filter(substr => substr !== NaN)\n\n    if(numbersOnly.length){\n      let number = numbersOnly[0]\n      let numberPosition = filename.indexOf(number)\n      let prefix = filename.slice(0, numberPosition)\n      let suffix = filename.slice(numberPosition + number.toString().length )\n      return {\n        number: number,\n        prefix: prefix,\n        suffix: suffix\n      }\n    }else{\n      return null\n    }\n  }\n\n  constructor(){\n    this._controlPoints = {}\n    this._collection = {}\n  }\n\n\n  addControlPoint(filename, xmlPayload){\n    let sequenceInfo = AdobeXmpInterpolator.findNumberSequence(filename)\n    if(!sequenceInfo){\n      throw new Error(`The filename must contain a sequence of number in its name. (\"${filename}\" given)`)\n    }\n\n    let adobeXmp = new AdobeXmp()\n    adobeXmp.setXmlPayload(xmlPayload)\n\n    this._controlPoints[sequenceInfo.number] = {\n      filename: filename,\n      adobeXmp: adobeXmp,\n      ...sequenceInfo\n    }\n\n    console.log(adobeXmp)\n\n    // resetting the collection\n    this._collection = {}\n  }\n\n\n  checkControlPointIntegrity(){\n    let controlPointList = Object.values(this._controlPoints)\n\n    // there must be at least two control point in order to interpolate in betwen\n    if(controlPointList.length < 2){\n      throw new Error(`There must be at least two control points, only ${controlPointList.length} given.`)\n    }\n\n    // they must all have the same prefix\n    let allSamePrefix = controlPointList.map(cp => cp.prefix).every(prefix => prefix === controlPointList[0].prefix)\n    if(!allSamePrefix){\n      throw new Error('All the control point filename must have the same shape: prefix, sequence number, suffix. Prefixes differ.')\n    }\n\n    // they must all have the same suffix\n    let allSameSuffix = controlPointList.map(cp => cp.suffix).every(suffix => suffix === controlPointList[0].suffix)\n    if(!allSameSuffix){\n      throw new Error('All the control point filename must have the same shape: prefix, sequence number, suffix. Suffixes differ.')\n    }\n\n    // check if all the provided xmp are actually the result of development\n    let allHaveSettings = controlPointList.map(cp => cp.adobeXmp).every(adobeXmp => adobeXmp.hasSettings())\n    if(!allHaveSettings){\n      throw new Error('All the provided XMP file must be the result of photo development (not blank).')\n    }\n\n    return true\n  }\n\n\n  interpolate(){\n    // order the control points\n    let controlPointList = Object.values(this._controlPoints)\n      .sort((a, b) => a.number < b.number ? -1 : 1)\n\n    let firstControlPoint = controlPointList[0]\n    let firstIndex = firstControlPoint.number\n    let lastIndex = controlPointList[controlPointList.length - 1].number\n    let prefix = firstControlPoint.prefix\n    let suffix = firstControlPoint.suffix\n\n    // create clones of the first AdobeXmp objects for all the series\n    let intermediates = []\n    for(let i=firstIndex; i<=lastIndex; i++){\n      if(i in this._controlPoints){\n        intermediates.push(this._controlPoints[i]) // replacing an intermediate by a control point\n      }else{\n        intermediates.push({\n          adobeXmp: firstControlPoint.adobeXmp.clone(),\n          number: i\n        })\n      }\n    }\n\n    // get the list of setting attributes\n    let settingAttributeNames = firstControlPoint.adobeXmp.getListOfSettingAttributes()\n\n    // for each setting attribute, we build a spline that goes along all the control points\n    let xs = controlPointList.map(cp => cp.number)\n\n    // for each settings, we create the y coordinates to interpolate on\n    settingAttributeNames.forEach(attr => {\n      let ys = controlPointList.map(cp => cp.adobeXmp.getSettingAttribute(attr))\n      let splineInterpolator = new MonotonicCubicSpline(xs, ys)\n\n      // for each intermediate, we interpolate\n      intermediates.forEach(inter => {\n        // control points don't need interpolation\n        if(inter.number in this._controlPoints){\n          return\n        }\n\n        inter.adobeXmp.setSettingAttribute(attr, splineInterpolator.interpolate(inter.number))\n      })\n    })\n\n\n    // building the collection\n    intermediates.forEach(inter => {\n      this._collection[`${prefix}${inter.number}${suffix}`] = inter.adobeXmp\n    })\n\n    return this._collection\n  }\n\n\n  getCollection(){\n    return this._collection\n  }\n\n}\n\nexport default AdobeXmpInterpolator\n","import AdobeXmp from './AdobeXmp'\nimport AdobeXmpInterpolator from './AdobeXmpInterpolator'\n\nexport default { AdobeXmp, AdobeXmpInterpolator }\n"],"names":["MonotonicCubicSpline"],"mappings":"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"}